<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | My Octopress Blog]]></title>
  <link href="http://royrusso.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://royrusso.github.io/"/>
  <updated>2014-04-11T14:13:42-04:00</updated>
  <id>http://royrusso.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Debug Maven Test Goal With Intellij IDEA]]></title>
    <link href="http://royrusso.github.io/blog/2014/03/12/debug-maven-test-goal-with-intellij-idea/"/>
    <updated>2014-03-12T06:00:00-04:00</updated>
    <id>http://royrusso.github.io/blog/2014/03/12/debug-maven-test-goal-with-intellij-idea</id>
    <content type="html"><![CDATA[<p>Making it possible to live-debug and add breakpoints to your code during a maven test goal in Intellij Idea, shouldn&rsquo;t take more than a minute.</p>

<ol>
<li><p>Modify your pom to have the debug process fork:</p></li>
<li><p>Next, configure your debug process. You reach that under <code>Run &gt; Edit Configuration</code> and add a <strong>Remote</strong> debugger:</p></li>
</ol>


<p><a href="http://www.royrusso.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-11-at-3.05.15-PM.png"><img src="http://www.royrusso.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-11-at-3.05.15-PM-300x232.png" alt="Maven debug remote intellij" /></a></p>

<ol>
<li>Once the above is configured, <strong>run</strong> the <code>mvn test</code> goal. It should pause, listening on port 5005&hellip;</li>
</ol>


<p><a href="http://www.royrusso.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-11-at-3.13.23-PM.png"><img src="http://www.royrusso.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-11-at-3.13.23-PM-300x289.png" alt="" /></a></p>

<ol>
<li>Now execute the remote debugger you configured earlier. It should attach on port 5005. If you don&rsquo;t have any breakpoints, you should see the below. If you have breakpoints, obviously they will trigger&hellip;</li>
</ol>


<p><a href="http://www.royrusso.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-11-at-3.17.36-PM.png"><img src="http://www.royrusso.com/wp-content/uploads/2014/03/Screen-Shot-2014-03-11-at-3.17.36-PM-300x49.png" alt="" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JWatch - a Quartz Monitor]]></title>
    <link href="http://royrusso.github.io/blog/2011/07/05/jwatch-a-quartz-monitor/"/>
    <updated>2011-07-05T10:09:35-04:00</updated>
    <id>http://royrusso.github.io/blog/2011/07/05/jwatch-a-quartz-monitor</id>
    <content type="html"><![CDATA[<p>I am proud to announce the release of <a href="http://code.google.com/p/jwatch/">JWatch v0.8</a> &ndash; An Open Source and Free Monitoring Application for the <a href="http://quartz-scheduler.org/">Quartz Job Scheduler</a>. The browser-based user-interface allows developers to monitor multiple Quartz instances in real-time. In addition, a RESTful API is available for those wishing to extend the application.</p>

<p>Future releases will expand JWatch&rsquo;s capabilities with the addition of management features, designed to make it easy for users to change Quartz Jobs and Triggers in real-time and monitor the changes. <em><strong> </strong></em></p>

<p><em><strong>Note:</strong> The current release of JWatch works with Quartz 2.0+. It will not work with previous versions of Quartz.</em></p>

<p>The current release of JWatch, includes the following features:</p>

<ul>
<li><p>Monitor multiple Quartz Instances across multiple applications concurrently.</p></li>
<li><p>Monitor multiple Schedulers and Jobs per Quartz Instance.</p></li>
<li><p>Drill-down for more information in to Quartz Job and Trigger objects.</p></li>
<li><p>Real-Time monitoring of presently executing jobs.</p></li>
<li><p><a href="http://code.google.com/p/jwatch/wiki/RESTfulAPI">RESTful JSON API</a> for those wishing to extend the application.</p></li>
<li><p>Easy to deploy &ndash; just drop in a war and configure your instances.</p></li>
<li><p><strong>It&rsquo;s free!</strong> (<a href="http://code.google.com/p/jwatch/source/browse/trunk/LICENSE">LGPL</a>)</p></li>
<li><p>Easy <a href="http://code.google.com/p/jwatch/wiki/Installation">installation and configuration</a>.</p></li>
</ul>


<p><img src="../wp-includes/js/tinymce/plugins/wpgallery/img/t.gif" alt="" /></p>

<p>Screenshots:</p>

<p>[gallery link=&ldquo;file&rdquo; columns=&ldquo;2&rdquo;]</p>

<p>Links:</p>

<ul>
<li><p><a href="http://code.google.com/p/jwatch/">JWatch &ndash; A Quartz Monitor Home</a></p></li>
<li><p><a href="http://code.google.com/p/jwatch/wiki/Installation">Installation / Configuration Documentation</a></p></li>
<li><p><a href="http://code.google.com/p/jwatch/wiki/RESTfulAPI">RESTful API Documentation</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Terracotta Quartz Relational Model]]></title>
    <link href="http://royrusso.github.io/blog/2011/04/19/terracotta-quartz-relational-model/"/>
    <updated>2011-04-19T15:55:33-04:00</updated>
    <id>http://royrusso.github.io/blog/2011/04/19/terracotta-quartz-relational-model</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working on an OSS project during my spare time which is deeply intertwined with <a href="http://www.quartz-scheduler.org/">Terracotta Quartz</a>. Because of the nature of the project, I do not interface with Quartz through the standard API (no bundling), but am accessing it via JMX MBean. This is not an easy task, as there are large differences between Quartz 1.x and Quartz 2.x exposed methods and bundling Quartz in the project distro is <strong>not</strong> an option. Since I plan to support different versions of Quartz, it is left up to my adapters to figure out what version someone has installed and how it should access remote methods.<em> Any guess to what I&rsquo;m building?</em> ;&ndash;)</p>

<p>One thing I was unable to find is how the <em>important</em> Quartz objects relate to each other. In the past, I&rsquo;ve implemented Quartz in projects, but never really dug around at its internals. Even while implementing Quartz, I found I often ended up with a one-to-one relationship between the major components. <strong>Instance &ndash;> Schedule &ndash;> Group &ndash;> (many)Job</strong>.</p>

<p>But wouldn&rsquo;t you know it &ndash; Quartz is a lot more flexible than that, allowing many-to-one relationships for several components. Here is a rather raw diagram of how all the pieces pay together. I didn&rsquo;t do a very good job of showing the many-to-one relationships in the model, but you get the point.</p>

<p><a href="http://www.royrusso.com/wp-content/uploads/2011/04/quartz_relation_model.png"><img src="http://www.royrusso.com/wp-content/uploads/2011/04/quartz_relation_model-300x272.png" alt="" /></a></p>

<p>Frankly, I would never have discovered this under normal use, and had to dig around with the JMX MBean to visualize this. It may be documented somewhere, but I couldn&rsquo;t find it.</p>

<p>Quartz' flexibility is great, but building a UI around this is going to be interesting. ;&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Get All Jobs With Terracotta Quartz 2.0+]]></title>
    <link href="http://royrusso.github.io/blog/2011/04/02/get-all-jobs-with-terracotta-quartz-2-0/"/>
    <updated>2011-04-02T09:11:13-04:00</updated>
    <id>http://royrusso.github.io/blog/2011/04/02/get-all-jobs-with-terracotta-quartz-2-0</id>
    <content type="html"><![CDATA[<p>The most recent <a href="http://www.quartz-scheduler.org/">Terracotta Quartz</a> release seems to have changed some of the API methods to list scheduled jobs. Although minor changes, I thought I&rsquo;d post sample code here for anyone trying the same thing as I, and hitting a wall with the API differences. Some of the changes are <a href="http://www.quartz-scheduler.org/docs/2.0/newInQuartz2.html">documented here</a> in the latest release, but it&rsquo;s OSS, so expect the docs to suck. ;&ndash;)</p>

<p>The changes, as best I can tell (<em>correct me if I&rsquo;m wrong</em>), revolve around accessing the Scheduler object.You can see the differences between the <a href="http://www.quartz-scheduler.org/docs/api/1.8.1/index.html">1.8 API</a> and the <a href="http://www.quartz-scheduler.org/docs/api/2.0.0/index.html">2.0 API</a>.</p>

<p>Changes I found:</p>

<ul>
<li><p><strong>scheduler.getJobGroupNames()</strong> now returns a List<String> , and not a String[].</p></li>
<li><p><strong>scheduler.getJobNames(groupName);</strong> has dissapeared.</p></li>
<li><p>You must now use <strong>scheduler.getJobKeys(GroupMatcher.groupEquals(name));</strong> to get a Set<JobKey>, which will be used to call <strong>scheduler.getJobDetail((JobKey)iter.next());</strong></p></li>
</ul>


<h3>Sample Code</h3>

<pre><code>      try
      { 
         Scheduler scheduler = StdSchedulerFactory.getDefaultScheduler();
         List jobGroups = scheduler.getJobGroupNames();
         for (int i = 0; i &lt; jobGroups.size(); i++)
         {
            String name = (String) jobGroups.get(i);
            Set keys = scheduler.getJobKeys(GroupMatcher.groupEquals(name));
            Iterator iter = keys.iterator();
            while (iter.hasNext())
            {
               JobDetail jobDetail = scheduler.getJobDetail((JobKey)iter.next());
               JobDataMap jobDataMap = jobDetail.getJobDataMap();
               // do something
            }
         }
      }
      catch (SchedulerException se)
      {
         se.printStackTrace();
      }
</code></pre>

<p>I specially like the addition of <strong>scheduler.getJobKeys(GroupMatcher.groupEquals(name));</strong>, where <a href="http://www.quartz-scheduler.org/docs/api/2.0.0/org/quartz/impl/matchers/GroupMatcher.html">GroupMatcher</a> can take some crude expressions like <strong>groupContains(String compareTo)</strong> and <strong>groupStartsWith(String compareTo)</strong>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java and the Lean SaaS Startup]]></title>
    <link href="http://royrusso.github.io/blog/2011/03/02/java-and-the-lean-saas-startup/"/>
    <updated>2011-03-02T17:38:49-05:00</updated>
    <id>http://royrusso.github.io/blog/2011/03/02/java-and-the-lean-saas-startup</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had a lot of time on my hands lately. I&rsquo;ve mostly spent it playing with fish tanks, but as of last week, I was all out of fish work and room for new tanks&hellip; so I started talking to a few Atlanta startups. I basically go in, they hammer me with questions and I do my best to not look stupid. After what I helped build at LoopFuse, you&rsquo;d be hard pressed to find someone in this town that can build something that secure, scalable, fault-tolerant and damn intuitive to use! This isn&rsquo;t San Francisco, and yes, that was an arrogant statement.</p>

<p>There are a few common challenges I see that keep popping-up in the Atlanta Java SaaS startup world. I&rsquo;ll try my best to summarize what I think is the best-of-breed combination of SaaS startup technologies and hopefully arrive at a decent stack. These are common threads I keep seeing, and also tools that I used one of my many SaaS jobs or while I worked at JBoss.</p>

<!-- more -->


<h3>Database</h3>

<p><strong>MySQL:</strong> Let me get this out of the way. I know it has nothing to do with Java, but it&rsquo;s free and near-infinitely scalable in a multi-tenant SaaS environment. If you&rsquo;re a startup, go MySQL. Your first few years in business won&rsquo;t call for OracleDB and you&rsquo;ll just run out of money faster.  Wait for your Series C, where you hire 5 DBAs and have a multi-million-dollar Oracle server running in a bunker, then you go Oracle. I don&rsquo;t believe the future is unclear for MySQL under Oracle control like many others do, but that&rsquo;s a different blog post.</p>

<h3>Application Server</h3>

<p><strong>Tomcat (or JBoss):</strong> Now the decision becomes, which app server to use&hellip; Tomcat or JBoss? JBoss. Although, I have rarely built out a system that required full-fledged JBoss, the pluggable architecture is a nice-to-have for future build-out. Tomcat meets all the requirements for something that is fault-tolerant, high-throughput, scalable, and secure. I&rsquo;m wary of having to &ldquo;plug-in&rdquo; components 2 years down the road in to a stock Tomcat instance, however. Most of the startups I&rsquo;ve visited are deploying on JBoss, and a lot of the reasoning behind it is based on three thoughts:</p>

<ol>
<li><p>Everything in a box: It&rsquo;s like getting those gift baskets with all the cheeses and meats. I hate salami and stinky cheese, but one day, when I&rsquo;m starving, I will certainly eat it, so it&rsquo;s nice that it&rsquo;s included. Since JBoss includes cache/clustering/tomcat/hibernate/messaging as pluggable components, then there is some assurance that it must all work well together.</p></li>
<li><p>Support: JBoss offers &ldquo;Support from the Source&rdquo;. No-brainer here. One day you will need it, and I&rsquo;d rather pay for JBoss support than be at the mercy of an Apache email list.</p></li>
<li><p>Tomcat included: This is obvious&hellip; Tomcat is the servlet engine under the hood. It can be tuned for massive multi-threading/throughput, and complemented with custom Filters and Valves. You will need those customer Filters/Valves if you plan to have any measure of security in your application. It is also the easiest way to prevent against (XSS) Cross-Site-Scripting attacks.</p></li>
</ol>


<p>Why not mention Glassfish? Oracle will cripple it. IBM + Gluecode = Websphere Children&rsquo;s Edition. Expect the same from ORA.</p>

<h3>ORM</h3>

<p><strong>Hibernate: </strong>If you&rsquo;re building your app on some No-SQL/Hadoop/MapReduce thing, good luck to you. For those of you that are building a viable startup, Hibernate is the way to go. Hibernate gives you two things that will impact your startup:</p>

<ol>
<li><p>Object-Relational-Mapping: Removes the need for hand-coding JDBC queries and automagically maps objects to to your schema. This feature alone, will result in faster development cycles, as Hibernate has a low learning curve and is a convenience tool. Hibernate talent is easy to find, so new developers ramp up quickly as well.</p></li>
<li><p>Less Refactoring: Your database schema will likely change 100 times as you build-out your app. Hand-coded JDBC queries are an absolute nightmare to maintain with a schema that is changing. Hibernate gives you the ability to quickly refactor mappings and HQL calls throughout your entire codebase, where JDBC falls flat. ie. It&rsquo;s much easier for a developer to find/refactor usages/properties of a Hibernate object than to run a wildcard search across the JDBC layer of code to find a table-name.</p></li>
</ol>


<p>Pitfall to avoid: Whatever you do, <strong>never ever</strong> allow Hibernate to be your DBA by letting it automatically create and update  your database schema (hbm2ddl.auto flag in your cfg file). Your DB should be designed by someone with experience in building scalable DB architecture, and not a schema-export tool that&rsquo;s reading from an XML file a developer hacked together! Your database WILL BE your central point of failure and your performance bottleneck eventually. Don&rsquo;t make it worse!</p>

<h3>UI</h3>

<p>By all means, you should all go out and use Spring or Struts or JSF or Seam as your foundation for a solid and usable UI.</p>

<p>When you&rsquo;re done swallowing and expelling that line of <strong>crap </strong>that&rsquo;s dished-out at Java conferences, let me welcome you to 2011&hellip;</p>

<p>For a clean dynamic UI, I advocate&hellip; no&hellip; champion&hellip; no&hellip; worship <a href="http://www.sencha.com/products/extjs/">Ext-JS</a>. I developed LoopFuse entirely on Ext-JS&hellip; you can see the ExtJS blog post <a href="http://www.sencha.com/blog/spotlight-ext-js-customers/">here</a>. It was only after I looked at what a competitor was doing with ExtJS that I decided to completely GUT JSF from the system and replace it with a &ldquo;flatter&rdquo; architecture without any MVC. <em>Who the hell does page-turning apps these days anyway? </em>The beauty of it is that redoing the UI in ExtJS was trivial, and the impact to customers with regards to usability was immeasurable!</p>

<p>Lessons learned:</p>

<ol>
<li><p> The flatter the architecture, the easier to maintain/adjust and  ramp-up new talent.</p></li>
<li><p> Separation of disciplines. Would you have the carpenter that installed your front door also lay your plumbing and wire the electrical in your new house? No. So don&rsquo;t have the Java plumber work on your UI. Have a UI guy work on your UI.</p></li>
<li><p> Business layer and DB layer were untouched by the move.</p></li>
<li><p> Page-turning went away.</p></li>
<li><p> JSON was used as the standard communication format between UI  and Java Servlets.</p></li>
<li><p> Those same JSON calls were then leveraged with the help of Jersey to offer a WS API (Killed two birds with one stone.)</p></li>
<li><p> No more cryptic JSF error messages.</p></li>
<li><p> You can actually refresh a page without triggering an action!</p></li>
<li><p> The volume of free ExtJS plugins and components is amazing.</p></li>
<li><p>. ExtJS, even with it&rsquo;s default theme, looks sweet!</p></li>
<li><p>. It&rsquo;s cross-browser compatible.</p></li>
<li><p>. Dynamic flash charts also understand JSON&hellip; double-win!</p></li>
</ol>


<p>Let me qualify why I DON&rsquo;T like the use of MVC frameworks &ndash; <strong>your Java developer should NOT be touching UI code</strong>. I know&hellip; Java developers are the smartest people in the world, but really now, Java guys are generally horrible at building UIs unless they&rsquo;re targeted for other developers. I have never liked MVC frameworks, and I accuse them for being the sole reason that tech like PHP and RoR have grown in adoption with the web crowd compared to Java. A developer hacking at XML for a UI, is just wrong, and the learning curve is steep in some cases.</p>

<p>And so that is all for now. I&rsquo;m sure I&rsquo;ll update the blog soon with some other nuggets of wisdom to share as I spend my time walking about town.</p>
]]></content>
  </entry>
  
</feed>
