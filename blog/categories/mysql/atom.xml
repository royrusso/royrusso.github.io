<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MySQL | Roy's Blog]]></title>
  <link href="http://royrusso.github.io/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://royrusso.github.io/"/>
  <updated>2014-04-15T20:33:36-04:00</updated>
  <id>http://royrusso.github.io/</id>
  <author>
    <name><![CDATA[Roy Russo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java and the Lean SaaS Startup]]></title>
    <link href="http://royrusso.github.io/blog/2011/03/02/java-and-the-lean-saas-startup/"/>
    <updated>2011-03-02T17:38:49-05:00</updated>
    <id>http://royrusso.github.io/blog/2011/03/02/java-and-the-lean-saas-startup</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had a lot of time on my hands lately. I&rsquo;ve mostly spent it playing with fish tanks, but as of last week, I was all out of fish work and room for new tanks&hellip; so I started talking to a few Atlanta startups. I basically go in, they hammer me with questions and I do my best to not look stupid. After what I helped build at LoopFuse, you&rsquo;d be hard pressed to find someone in this town that can build something that secure, scalable, fault-tolerant and damn intuitive to use! This isn&rsquo;t San Francisco, and yes, that was an arrogant statement.</p>

<p>There are a few common challenges I see that keep popping-up in the Atlanta Java SaaS startup world. I&rsquo;ll try my best to summarize what I think is the best-of-breed combination of SaaS startup technologies and hopefully arrive at a decent stack. These are common threads I keep seeing, and also tools that I used one of my many SaaS jobs or while I worked at JBoss.</p>

<!-- more -->


<h3>Database</h3>

<p><strong>MySQL:</strong> Let me get this out of the way. I know it has nothing to do with Java, but it&rsquo;s free and near-infinitely scalable in a multi-tenant SaaS environment. If you&rsquo;re a startup, go MySQL. Your first few years in business won&rsquo;t call for OracleDB and you&rsquo;ll just run out of money faster.  Wait for your Series C, where you hire 5 DBAs and have a multi-million-dollar Oracle server running in a bunker, then you go Oracle. I don&rsquo;t believe the future is unclear for MySQL under Oracle control like many others do, but that&rsquo;s a different blog post.</p>

<h3>Application Server</h3>

<p><strong>Tomcat (or JBoss):</strong> Now the decision becomes, which app server to use&hellip; Tomcat or JBoss? JBoss. Although, I have rarely built out a system that required full-fledged JBoss, the pluggable architecture is a nice-to-have for future build-out. Tomcat meets all the requirements for something that is fault-tolerant, high-throughput, scalable, and secure. I&rsquo;m wary of having to &ldquo;plug-in&rdquo; components 2 years down the road in to a stock Tomcat instance, however. Most of the startups I&rsquo;ve visited are deploying on JBoss, and a lot of the reasoning behind it is based on three thoughts:</p>

<ol>
<li><p>Everything in a box: It&rsquo;s like getting those gift baskets with all the cheeses and meats. I hate salami and stinky cheese, but one day, when I&rsquo;m starving, I will certainly eat it, so it&rsquo;s nice that it&rsquo;s included. Since JBoss includes cache/clustering/tomcat/hibernate/messaging as pluggable components, then there is some assurance that it must all work well together.</p></li>
<li><p>Support: JBoss offers &ldquo;Support from the Source&rdquo;. No-brainer here. One day you will need it, and I&rsquo;d rather pay for JBoss support than be at the mercy of an Apache email list.</p></li>
<li><p>Tomcat included: This is obvious&hellip; Tomcat is the servlet engine under the hood. It can be tuned for massive multi-threading/throughput, and complemented with custom Filters and Valves. You will need those customer Filters/Valves if you plan to have any measure of security in your application. It is also the easiest way to prevent against (XSS) Cross-Site-Scripting attacks.</p></li>
</ol>


<p>Why not mention Glassfish? Oracle will cripple it. IBM + Gluecode = Websphere Children&rsquo;s Edition. Expect the same from ORA.</p>

<h3>ORM</h3>

<p><strong>Hibernate: </strong>If you&rsquo;re building your app on some No-SQL/Hadoop/MapReduce thing, good luck to you. For those of you that are building a viable startup, Hibernate is the way to go. Hibernate gives you two things that will impact your startup:</p>

<ol>
<li><p>Object-Relational-Mapping: Removes the need for hand-coding JDBC queries and automagically maps objects to to your schema. This feature alone, will result in faster development cycles, as Hibernate has a low learning curve and is a convenience tool. Hibernate talent is easy to find, so new developers ramp up quickly as well.</p></li>
<li><p>Less Refactoring: Your database schema will likely change 100 times as you build-out your app. Hand-coded JDBC queries are an absolute nightmare to maintain with a schema that is changing. Hibernate gives you the ability to quickly refactor mappings and HQL calls throughout your entire codebase, where JDBC falls flat. ie. It&rsquo;s much easier for a developer to find/refactor usages/properties of a Hibernate object than to run a wildcard search across the JDBC layer of code to find a table-name.</p></li>
</ol>


<p>Pitfall to avoid: Whatever you do, <strong>never ever</strong> allow Hibernate to be your DBA by letting it automatically create and update  your database schema (hbm2ddl.auto flag in your cfg file). Your DB should be designed by someone with experience in building scalable DB architecture, and not a schema-export tool that&rsquo;s reading from an XML file a developer hacked together! Your database WILL BE your central point of failure and your performance bottleneck eventually. Don&rsquo;t make it worse!</p>

<h3>UI</h3>

<p>By all means, you should all go out and use Spring or Struts or JSF or Seam as your foundation for a solid and usable UI.</p>

<p>When you&rsquo;re done swallowing and expelling that line of <strong>crap </strong>that&rsquo;s dished-out at Java conferences, let me welcome you to 2011&hellip;</p>

<p>For a clean dynamic UI, I advocate&hellip; no&hellip; champion&hellip; no&hellip; worship <a href="http://www.sencha.com/products/extjs/">Ext-JS</a>. I developed LoopFuse entirely on Ext-JS&hellip; you can see the ExtJS blog post <a href="http://www.sencha.com/blog/spotlight-ext-js-customers/">here</a>. It was only after I looked at what a competitor was doing with ExtJS that I decided to completely GUT JSF from the system and replace it with a &ldquo;flatter&rdquo; architecture without any MVC. <em>Who the hell does page-turning apps these days anyway? </em>The beauty of it is that redoing the UI in ExtJS was trivial, and the impact to customers with regards to usability was immeasurable!</p>

<p>Lessons learned:</p>

<ol>
<li><p> The flatter the architecture, the easier to maintain/adjust and  ramp-up new talent.</p></li>
<li><p> Separation of disciplines. Would you have the carpenter that installed your front door also lay your plumbing and wire the electrical in your new house? No. So don&rsquo;t have the Java plumber work on your UI. Have a UI guy work on your UI.</p></li>
<li><p> Business layer and DB layer were untouched by the move.</p></li>
<li><p> Page-turning went away.</p></li>
<li><p> JSON was used as the standard communication format between UI  and Java Servlets.</p></li>
<li><p> Those same JSON calls were then leveraged with the help of Jersey to offer a WS API (Killed two birds with one stone.)</p></li>
<li><p> No more cryptic JSF error messages.</p></li>
<li><p> You can actually refresh a page without triggering an action!</p></li>
<li><p> The volume of free ExtJS plugins and components is amazing.</p></li>
<li><p>. ExtJS, even with it&rsquo;s default theme, looks sweet!</p></li>
<li><p>. It&rsquo;s cross-browser compatible.</p></li>
<li><p>. Dynamic flash charts also understand JSON&hellip; double-win!</p></li>
</ol>


<p>Let me qualify why I DON&rsquo;T like the use of MVC frameworks &ndash; <strong>your Java developer should NOT be touching UI code</strong>. I know&hellip; Java developers are the smartest people in the world, but really now, Java guys are generally horrible at building UIs unless they&rsquo;re targeted for other developers. I have never liked MVC frameworks, and I accuse them for being the sole reason that tech like PHP and RoR have grown in adoption with the web crowd compared to Java. A developer hacking at XML for a UI, is just wrong, and the learning curve is steep in some cases.</p>

<p>And so that is all for now. I&rsquo;m sure I&rsquo;ll update the blog soon with some other nuggets of wisdom to share as I spend my time walking about town.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SaaS Multi-Tenant MySQL5 - One Schema]]></title>
    <link href="http://royrusso.github.io/blog/2011/02/22/saas-multi-tenant-mysql5-one-schema/"/>
    <updated>2011-02-22T10:16:26-05:00</updated>
    <id>http://royrusso.github.io/blog/2011/02/22/saas-multi-tenant-mysql5-one-schema</id>
    <content type="html"><![CDATA[<p>Over the past 10 years I&rsquo;ve spent working with multi-tenant software architecture, I&rsquo;ve seen a lot of clever ideas and collosal mistakes made in designing systems for fault-tolerance and scalability. I decided it was time to note some of the best/worst practices here regarding the deployment of SaaS multi-tenant MySQL database designs, as food-for-thought to others designing a system from the ground-up.</p>

<p>Inevitably one of the initial crossroads a design team will reach is whether to design a system using one global schema or many schema. To put it simply, you are deciding on whether you want every customer&rsquo;s data in on MySQL schema or you will have one-schema-per-customer within a MySQL instance. This is not a trivial design question, as getting this &ldquo;right&rdquo; in the beginning will cost you less headaches in the end. I&rsquo;ll assume you aren&rsquo;t designing in a vaccuum, and have a good idea of what the business side of your company would like to achieve with the software you&rsquo;re deploying, ie. customer numbers, size of user-base, transactions per month, etc&hellip;</p>

<p>To make this simple, I&rsquo;ve broken down some of the pros and cons of designing a multi-tenant database architecture with MySQL using <strong>one schema</strong>&hellip;</p>

<!-- more -->


<h3>Pros to a One Schema Strategy:</h3>

<ul>
<li><p><strong>Easier to maintain:</strong> It&rsquo;s easier to run update/delete/backup/etc operations on one schema than many.</p></li>
<li><p><strong>Easier to deploy new code and update existing database: </strong>One update script and BAM! you&rsquo;re live with your new code.</p></li>
<li><p><strong>Easier to backup/mirror data: </strong>Setting up a Master-Master and/or Master-Slave configuration is trivial as it&rsquo;s likely a one-to-one relationship.</p></li>
<li><p><strong>Easier on developers: </strong>It&rsquo;s (a little) easier on developers, as they don&rsquo;t have to worry about switching context to a separate DB for every customer. This will vary depending on the programming language used.</p></li>
</ul>


<h3>Cons to a One Schema Strategy:</h3>

<ul>
<li><p><strong>Risk of co-mingling customer data:</strong> This is the most obvious  and dangerous aspect, because it may not be under the control of the DBA  and some bad coding practices can expose customer data to the wrong  person. Again, this is <strong>not</strong> under the control of the DBA.</p></li>
<li><p><strong>Possible performance problems:</strong> All customers in one schema means all customer on one machine means potentially multi-million row tables that you are joining. You&rsquo;ll need a good DBA that can generate a good SQL query plan that your good developers will adhere to. <strong>A one-schema multi-tenant system is less forgiving</strong> than a many-schema system. Table or Row locks may cripple the entire system!</p></li>
<li><p><strong>Possible problems when deleting a customer entirely:</strong> Removing  one customer from one schema, means you will have missing rows within  your tables&hellip; affecting the lazy coder that likes to &ldquo;SELECT &hellip; ORDER  BY PRIMARY_KEY DESC LIMIT 0,1&rdquo;, just to get MAX ID.</p></li>
<li><p><strong>Increased Hardware Costs:</strong> This depends on what kind of app you&rsquo;re building. If your application will store multi-million row tables that are constantly being crunched for reporting/analytics, you will need some decent hardware. The fact remains that one 128GB 4CPU machine will cost you more than two 64GB 4CPU machines. If you&rsquo;re hosting in the cloud, at last look, it&rsquo;s the same scenario: <a href="http://aws.amazon.com/ec2/pricing/">Amazon pricing</a>.</p></li>
</ul>


<p>I won&rsquo;t comment on what companies I&rsquo;ve worked for or consulted that deploy on this schema as I find that to be unethical. I do know however that SalesForce.com deploys on one schema. SFDC likely pushes billions of transactions a day on a one schema database shared among 50,000+ customers. Then again, SFDC also has a platoon of DBA, a squad of IT folks, and a multi-million-dollar Oracle DB server.</p>

<p>One-schema systems are the most convenient to develop-on and maintain, but convenience doesn&rsquo;t come without costs &ndash; monetary and quality-wise. The question I always start-off with is: &ldquo;<em>Will the system be used by millions of customers with millions of active connections and billions of transactions per day?</em>&rdquo;. This may sound like a silly question, but I find it easier to start here, because if the answer is &ldquo;yes&rdquo;, as in the case of a web analytics or email marketing platform, I&rsquo;m likely not looking at a one-schema system. As for my SalesForce.com connections, even the architects I&rsquo;ve spoken to, wish they had implemented a multi-schema system originally. ;&ndash;)</p>
]]></content>
  </entry>
  
</feed>
